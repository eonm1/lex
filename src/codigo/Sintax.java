//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 23 22:39:06 MDT 2020
//----------------------------------------------------
package codigo;

import java_cup.runtime.Symbol;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Tue Jun 23 22:39:06 MDT 2020
 */
public class Sintax extends java_cup.runtime.lr_parser
{

    /**
     * Default constructor.
     */
    public Sintax()
    {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintax( java_cup.runtime.Scanner s )
    {
        super( s );
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintax( java_cup.runtime.Scanner s , java_cup.runtime.SymbolFactory sf )
    {
        super( s , sf );
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings( new String[]
            {
                "\000\215\000\002\002\004\000\002\002\011\000\002\002"
                + "\010\000\002\002\010\000\002\002\010\000\002\002\010"
                + "\000\002\002\010\000\002\002\010\000\002\026\011\000"
                + "\002\026\010\000\002\026\010\000\002\026\010\000\002"
                + "\026\010\000\002\026\010\000\002\005\003\000\002\003"
                + "\003\000\002\003\003\000\002\003\003\000\002\003\003"
                + "\000\002\003\003\000\002\003\006\000\002\003\003\000"
                + "\002\003\005\000\002\003\004\000\002\003\003\000\002"
                + "\003\003\000\002\003\003\000\002\003\005\000\002\003"
                + "\005\000\002\003\005\000\002\003\005\000\002\003\004"
                + "\000\002\006\004\000\002\006\002\000\002\032\010\000"
                + "\002\032\007\000\002\032\007\000\002\032\007\000\002"
                + "\032\007\000\002\032\007\000\002\032\007\000\002\033"
                + "\010\000\002\033\007\000\002\033\007\000\002\033\007"
                + "\000\002\033\007\000\002\033\007\000\002\031\022\000"
                + "\002\031\022\000\002\031\021\000\002\031\021\000\002"
                + "\031\021\000\002\031\021\000\002\031\021\000\002\031"
                + "\021\000\002\031\021\000\002\031\021\000\002\031\021"
                + "\000\002\031\021\000\002\031\021\000\002\031\021\000"
                + "\002\031\021\000\002\031\021\000\002\031\021\000\002"
                + "\031\021\000\002\010\006\000\002\010\005\000\002\013"
                + "\004\000\002\013\004\000\002\013\003\000\002\013\003"
                + "\000\002\013\003\000\002\013\003\000\002\013\004\000"
                + "\002\021\005\000\002\021\004\000\002\021\007\000\002"
                + "\004\005\000\002\004\006\000\002\004\004\000\002\004"
                + "\005\000\002\004\005\000\002\004\005\000\002\004\005"
                + "\000\002\024\006\000\002\024\010\000\002\024\005\000"
                + "\002\024\005\000\002\024\005\000\002\024\007\000\002"
                + "\024\007\000\002\024\007\000\002\024\007\000\002\024"
                + "\007\000\002\025\006\000\002\025\010\000\002\025\010"
                + "\000\002\025\005\000\002\025\005\000\002\025\005\000"
                + "\002\015\003\000\002\015\003\000\002\015\003\000\002"
                + "\014\003\000\002\014\003\000\002\014\003\000\002\014"
                + "\003\000\002\007\003\000\002\007\003\000\002\011\015"
                + "\000\002\011\011\000\002\011\014\000\002\011\014\000"
                + "\002\011\014\000\002\011\014\000\002\011\014\000\002"
                + "\011\014\000\002\011\014\000\002\011\010\000\002\011"
                + "\010\000\002\011\010\000\002\011\010\000\002\016\006"
                + "\000\002\016\004\000\002\016\006\000\002\016\005\000"
                + "\002\016\005\000\002\023\004\000\002\017\003\000\002"
                + "\017\003\000\002\020\003\000\002\020\003\000\002\020"
                + "\003\000\002\020\003\000\002\020\003\000\002\020\003"
                + "\000\002\012\011\000\002\012\010\000\002\012\010\000"
                + "\002\012\010\000\002\012\010"
    } );

    /**
     * Access to production table.
     */
    public short[][] production_table()
    {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings( new String[]
            {
                "\000\u01b1\000\006\004\006\055\004\001\002\000\004\037"
                + "\u01af\001\002\000\004\002\u01ae\001\002\000\006\037\010"
                + "\055\007\001\002\000\006\033\u01a2\037\u01a1\001\002\000"
                + "\004\033\011\001\002\000\056\005\013\006\047\010\052"
                + "\012\060\013\050\014\054\015\031\030\015\034\uffe0\037"
                + "\046\040\056\041\016\046\053\050\032\051\026\054\033"
                + "\056\024\057\027\060\040\065\036\070\025\071\045\001"
                + "\002\000\030\011\uffbc\016\uffbc\017\uffbc\021\uffbc\022\uffbc"
                + "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\031\uffbc\033\uffbc\001"
                + "\002\000\006\027\uff9d\037\uff9d\001\002\000\004\037\u019e"
                + "\001\002\000\026\012\060\013\050\014\054\015\031\020"
                + "\135\030\161\031\u0190\037\064\040\056\041\016\001\002"
                + "\000\042\011\uffb9\012\060\013\050\014\054\015\031\016"
                + "\uffb9\017\uffb9\021\uffb9\022\uffb9\024\uffb9\025\uffb9\026\uffb9"
                + "\027\uffb9\030\063\031\uffb9\033\uffb9\001\002\000\060\005"
                + "\uffec\006\uffec\010\uffec\012\uffec\013\uffec\014\uffec\015\uffec"
                + "\030\uffec\034\uffec\037\uffec\040\uffec\041\uffec\046\uffec\047"
                + "\uffec\050\uffec\051\uffec\054\uffec\056\uffec\057\uffec\060\uffec"
                + "\065\uffec\070\uffec\071\uffec\001\002\000\006\034\ufff3\047"
                + "\ufff3\001\002\000\060\005\013\006\047\010\052\012\060"
                + "\013\050\014\054\015\031\030\015\034\uffe0\037\046\040"
                + "\056\041\016\046\053\047\uffe0\050\032\051\026\054\033"
                + "\056\024\057\027\060\040\065\036\070\025\071\045\001"
                + "\002\000\004\034\u018c\001\002\000\060\005\ufff1\006\ufff1"
                + "\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\030\ufff1\034"
                + "\ufff1\037\ufff1\040\ufff1\041\ufff1\046\ufff1\047\ufff1\050\ufff1"
                + "\051\ufff1\054\ufff1\056\ufff1\057\ufff1\060\ufff1\065\ufff1\070"
                + "\ufff1\071\ufff1\001\002\000\006\027\uff9b\037\uff9b\001\002"
                + "\000\006\030\u017d\031\u017e\001\002\000\004\037\u017b\001"
                + "\002\000\024\012\060\013\050\014\054\015\031\027\u0178"
                + "\030\063\037\064\040\056\041\016\001\002\000\022\012"
                + "\060\013\050\014\054\015\031\030\063\037\064\040\056"
                + "\041\016\001\002\000\022\012\uff97\013\uff97\014\uff97\015"
                + "\uff97\030\uff97\037\uff97\040\uff97\041\uff97\001\002\000\006"
                + "\027\uff9c\037\uff9c\001\002\000\004\037\u0172\001\002\000"
                + "\060\005\ufff2\006\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2"
                + "\015\ufff2\030\ufff2\034\ufff2\037\ufff2\040\ufff2\041\ufff2\046"
                + "\ufff2\047\ufff2\050\ufff2\051\ufff2\054\ufff2\056\ufff2\057\ufff2"
                + "\060\ufff2\065\ufff2\070\ufff2\071\ufff2\001\002\000\060\005"
                + "\uffef\006\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015\uffef"
                + "\030\uffef\034\uffef\037\uffef\040\uffef\041\uffef\046\uffef\047"
                + "\uffef\050\uffef\051\uffef\054\uffef\056\uffef\057\uffef\060\uffef"
                + "\065\uffef\070\uffef\071\uffef\001\002\000\006\030\u015e\037"
                + "\u015f\001\002\000\060\005\uff95\006\uff95\010\uff95\012\uff95"
                + "\013\uff95\014\uff95\015\uff95\030\uff95\034\uff95\037\uff95\040"
                + "\uff95\041\uff95\046\uff95\047\uff95\050\uff95\051\uff95\054\uff95"
                + "\056\uff95\057\uff95\060\uff95\065\uff95\070\uff95\071\uff95\001"
                + "\002\000\006\037\332\067\331\001\002\000\060\005\ufff0"
                + "\006\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\030"
                + "\ufff0\034\ufff0\037\ufff0\040\ufff0\041\ufff0\046\ufff0\047\ufff0"
                + "\050\ufff0\051\ufff0\054\ufff0\056\ufff0\057\ufff0\060\ufff0\065"
                + "\ufff0\070\ufff0\071\ufff0\001\002\000\060\005\uffe8\006\uffe8"
                + "\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\030\uffe8\034"
                + "\uffe8\037\uffe8\040\uffe8\041\uffe8\046\uffe8\047\uffe8\050\uffe8"
                + "\051\uffe8\054\uffe8\056\uffe8\057\uffe8\060\uffe8\065\uffe8\070"
                + "\uffe8\071\uffe8\001\002\000\060\005\uffe9\006\uffe9\010\uffe9"
                + "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\030\uffe9\034\uffe9\037"
                + "\uffe9\040\uffe9\041\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9"
                + "\054\uffe9\056\uffe9\057\uffe9\060\uffe9\065\uffe9\070\uffe9\071"
                + "\uffe9\001\002\000\060\005\uff96\006\uff96\010\uff96\012\uff96"
                + "\013\uff96\014\uff96\015\uff96\030\uff96\034\uff96\037\uff96\040"
                + "\uff96\041\uff96\046\uff96\047\uff96\050\uff96\051\uff96\054\uff96"
                + "\056\uff96\057\uff96\060\uff96\065\uff96\070\uff96\071\uff96\001"
                + "\002\000\006\030\312\031\313\001\002\000\024\011\115"
                + "\012\060\013\050\014\054\015\031\027\uffbb\030\264\031"
                + "\265\067\263\001\002\000\024\012\060\013\050\014\054"
                + "\015\031\020\135\030\206\037\064\040\056\041\016\001"
                + "\002\000\022\012\uff99\013\uff99\014\uff99\015\uff99\030\uff99"
                + "\037\uff99\040\uff99\041\uff99\001\002\000\060\005\uffee\006"
                + "\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\030\uffee"
                + "\034\uffee\037\uffee\040\uffee\041\uffee\046\uffee\047\uffee\050"
                + "\uffee\051\uffee\054\uffee\056\uffee\057\uffee\060\uffee\065\uffee"
                + "\070\uffee\071\uffee\001\002\000\024\012\060\013\050\014"
                + "\054\015\031\020\135\030\136\037\064\040\056\041\016"
                + "\001\002\000\016\005\013\037\073\050\032\051\072\054"
                + "\075\056\024\001\002\000\022\012\uff98\013\uff98\014\uff98"
                + "\015\uff98\030\uff98\037\uff98\040\uff98\041\uff98\001\002\000"
                + "\060\005\uffe7\006\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7"
                + "\015\uffe7\030\uffe7\034\uffe7\037\uffe7\040\uffe7\041\uffe7\046"
                + "\uffe7\047\uffe7\050\uffe7\051\uffe7\054\uffe7\056\uffe7\057\uffe7"
                + "\060\uffe7\065\uffe7\070\uffe7\071\uffe7\001\002\000\042\011"
                + "\uffba\012\060\013\050\014\054\015\031\016\uffba\017\uffba"
                + "\021\uffba\022\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030"
                + "\063\031\uffba\033\uffba\001\002\000\004\027\061\001\002"
                + "\000\022\012\uff9a\013\uff9a\014\uff9a\015\uff9a\030\uff9a\037"
                + "\uff9a\040\uff9a\041\uff9a\001\002\000\060\005\uffe2\006\uffe2"
                + "\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\030\uffe2\034"
                + "\uffe2\037\uffe2\040\uffe2\041\uffe2\046\uffe2\047\uffe2\050\uffe2"
                + "\051\uffe2\054\uffe2\056\uffe2\057\uffe2\060\uffe2\065\uffe2\070"
                + "\uffe2\071\uffe2\001\002\000\030\011\uffbd\016\uffbd\017\uffbd"
                + "\021\uffbd\022\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\031"
                + "\uffbd\033\uffbd\001\002\000\022\012\060\013\050\014\054"
                + "\015\031\030\063\037\064\040\056\041\016\001\002\000"
                + "\042\011\uffbb\012\060\013\050\014\054\015\031\016\uffbb"
                + "\017\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb\027"
                + "\uffbb\030\063\031\uffbb\033\uffbb\001\002\000\004\031\066"
                + "\001\002\000\040\011\uffb7\012\060\013\050\014\054\015"
                + "\031\016\uffb7\017\uffb7\021\uffb7\022\uffb7\024\uffb7\025\uffb7"
                + "\026\uffb7\027\uffb7\031\uffb7\033\uffb7\001\002\000\022\012"
                + "\060\013\050\014\054\015\031\030\063\037\064\040\056"
                + "\041\016\001\002\000\030\011\uffb5\016\uffb5\017\uffb5\021"
                + "\uffb5\022\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\031\uffb5"
                + "\033\uffb5\001\002\000\030\011\uffbe\016\uffbe\017\uffbe\021"
                + "\uffbe\022\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\031\uffbe"
                + "\033\uffbe\001\002\000\006\027\126\037\125\001\002\000"
                + "\006\011\122\027\121\001\002\000\006\027\111\037\112"
                + "\001\002\000\010\011\100\027\076\037\077\001\002\000"
                + "\060\005\uffa9\006\uffa9\010\uffa9\012\uffa9\013\uffa9\014\uffa9"
                + "\015\uffa9\030\uffa9\034\uffa9\037\uffa9\040\uffa9\041\uffa9\046"
                + "\uffa9\047\uffa9\050\uffa9\051\uffa9\054\uffa9\056\uffa9\057\uffa9"
                + "\060\uffa9\065\uffa9\070\uffa9\071\uffa9\001\002\000\066\005"
                + "\uffaa\006\uffaa\010\uffaa\011\105\012\uffaa\013\uffaa\014\uffaa"
                + "\015\uffaa\027\104\030\uffaa\034\uffaa\037\uffaa\040\uffaa\041"
                + "\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\054\uffaa\056\uffaa"
                + "\057\uffaa\060\uffaa\064\103\065\uffaa\070\uffaa\071\uffaa\001"
                + "\002\000\004\064\101\001\002\000\004\027\102\001\002"
                + "\000\060\005\uffa6\006\uffa6\010\uffa6\012\uffa6\013\uffa6\014"
                + "\uffa6\015\uffa6\030\uffa6\034\uffa6\037\uffa6\040\uffa6\041\uffa6"
                + "\046\uffa6\047\uffa6\050\uffa6\051\uffa6\054\uffa6\056\uffa6\057"
                + "\uffa6\060\uffa6\065\uffa6\070\uffa6\071\uffa6\001\002\000\004"
                + "\027\110\001\002\000\060\005\uffad\006\uffad\010\uffad\012"
                + "\uffad\013\uffad\014\uffad\015\uffad\030\uffad\034\uffad\037\uffad"
                + "\040\uffad\041\uffad\046\uffad\047\uffad\050\uffad\051\uffad\054"
                + "\uffad\056\uffad\057\uffad\060\uffad\065\uffad\070\uffad\071\uffad"
                + "\001\002\000\004\064\106\001\002\000\062\005\uffa4\006"
                + "\uffa4\010\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\027\107"
                + "\030\uffa4\034\uffa4\037\uffa4\040\uffa4\041\uffa4\046\uffa4\047"
                + "\uffa4\050\uffa4\051\uffa4\054\uffa4\056\uffa4\057\uffa4\060\uffa4"
                + "\065\uffa4\070\uffa4\071\uffa4\001\002\000\060\005\uffac\006"
                + "\uffac\010\uffac\012\uffac\013\uffac\014\uffac\015\uffac\030\uffac"
                + "\034\uffac\037\uffac\040\uffac\041\uffac\046\uffac\047\uffac\050"
                + "\uffac\051\uffac\054\uffac\056\uffac\057\uffac\060\uffac\065\uffac"
                + "\070\uffac\071\uffac\001\002\000\060\005\uffa5\006\uffa5\010"
                + "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\030\uffa5\034\uffa5"
                + "\037\uffa5\040\uffa5\041\uffa5\046\uffa5\047\uffa5\050\uffa5\051"
                + "\uffa5\054\uffa5\056\uffa5\057\uffa5\060\uffa5\065\uffa5\070\uffa5"
                + "\071\uffa5\001\002\000\060\005\uffaf\006\uffaf\010\uffaf\012"
                + "\uffaf\013\uffaf\014\uffaf\015\uffaf\030\uffaf\034\uffaf\037\uffaf"
                + "\040\uffaf\041\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\054"
                + "\uffaf\056\uffaf\057\uffaf\060\uffaf\065\uffaf\070\uffaf\071\uffaf"
                + "\001\002\000\064\005\uffae\006\uffae\010\uffae\011\115\012"
                + "\uffae\013\uffae\014\uffae\015\uffae\027\114\030\uffae\034\uffae"
                + "\037\uffae\040\uffae\041\uffae\046\uffae\047\uffae\050\uffae\051"
                + "\uffae\054\uffae\056\uffae\057\uffae\060\uffae\065\uffae\070\uffae"
                + "\071\uffae\001\002\000\060\005\uffb4\006\uffb4\010\uffb4\012"
                + "\uffb4\013\uffb4\014\uffb4\015\uffb4\030\uffb4\034\uffb4\037\uffb4"
                + "\040\uffb4\041\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\054"
                + "\uffb4\056\uffb4\057\uffb4\060\uffb4\065\uffb4\070\uffb4\071\uffb4"
                + "\001\002\000\060\005\uffb3\006\uffb3\010\uffb3\012\uffb3\013"
                + "\uffb3\014\uffb3\015\uffb3\030\uffb3\034\uffb3\037\uffb3\040\uffb3"
                + "\041\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\054\uffb3\056"
                + "\uffb3\057\uffb3\060\uffb3\065\uffb3\070\uffb3\071\uffb3\001\002"
                + "\000\024\012\060\013\050\014\054\015\031\027\116\030"
                + "\063\037\064\040\056\041\016\001\002\000\060\005\uffbf"
                + "\006\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\030"
                + "\uffbf\034\uffbf\037\uffbf\040\uffbf\041\uffbf\046\uffbf\047\uffbf"
                + "\050\uffbf\051\uffbf\054\uffbf\056\uffbf\057\uffbf\060\uffbf\065"
                + "\uffbf\070\uffbf\071\uffbf\001\002\000\004\027\120\001\002"
                + "\000\060\005\uffc0\006\uffc0\010\uffc0\012\uffc0\013\uffc0\014"
                + "\uffc0\015\uffc0\030\uffc0\034\uffc0\037\uffc0\040\uffc0\041\uffc0"
                + "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\054\uffc0\056\uffc0\057"
                + "\uffc0\060\uffc0\065\uffc0\070\uffc0\071\uffc0\001\002\000\060"
                + "\005\uffb0\006\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015"
                + "\uffb0\030\uffb0\034\uffb0\037\uffb0\040\uffb0\041\uffb0\046\uffb0"
                + "\047\uffb0\050\uffb0\051\uffb0\054\uffb0\056\uffb0\057\uffb0\060"
                + "\uffb0\065\uffb0\070\uffb0\071\uffb0\001\002\000\004\064\123"
                + "\001\002\000\004\027\124\001\002\000\060\005\uffa7\006"
                + "\uffa7\010\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\030\uffa7"
                + "\034\uffa7\037\uffa7\040\uffa7\041\uffa7\046\uffa7\047\uffa7\050"
                + "\uffa7\051\uffa7\054\uffa7\056\uffa7\057\uffa7\060\uffa7\065\uffa7"
                + "\070\uffa7\071\uffa7\001\002\000\064\005\uff9e\006\uff9e\010"
                + "\uff9e\011\130\012\uff9e\013\uff9e\014\uff9e\015\uff9e\027\127"
                + "\030\uff9e\034\uff9e\037\uff9e\040\uff9e\041\uff9e\046\uff9e\047"
                + "\uff9e\050\uff9e\051\uff9e\054\uff9e\056\uff9e\057\uff9e\060\uff9e"
                + "\065\uff9e\070\uff9e\071\uff9e\001\002\000\060\005\uff9f\006"
                + "\uff9f\010\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\030\uff9f"
                + "\034\uff9f\037\uff9f\040\uff9f\041\uff9f\046\uff9f\047\uff9f\050"
                + "\uff9f\051\uff9f\054\uff9f\056\uff9f\057\uff9f\060\uff9f\065\uff9f"
                + "\070\uff9f\071\uff9f\001\002\000\060\005\uffa3\006\uffa3\010"
                + "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\030\uffa3\034\uffa3"
                + "\037\uffa3\040\uffa3\041\uffa3\046\uffa3\047\uffa3\050\uffa3\051"
                + "\uffa3\054\uffa3\056\uffa3\057\uffa3\060\uffa3\065\uffa3\070\uffa3"
                + "\071\uffa3\001\002\000\006\052\131\053\132\001\002\000"
                + "\004\027\134\001\002\000\004\027\133\001\002\000\060"
                + "\005\uffa1\006\uffa1\010\uffa1\012\uffa1\013\uffa1\014\uffa1\015"
                + "\uffa1\030\uffa1\034\uffa1\037\uffa1\040\uffa1\041\uffa1\046\uffa1"
                + "\047\uffa1\050\uffa1\051\uffa1\054\uffa1\056\uffa1\057\uffa1\060"
                + "\uffa1\065\uffa1\070\uffa1\071\uffa1\001\002\000\060\005\uffa2"
                + "\006\uffa2\010\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\030"
                + "\uffa2\034\uffa2\037\uffa2\040\uffa2\041\uffa2\046\uffa2\047\uffa2"
                + "\050\uffa2\051\uffa2\054\uffa2\056\uffa2\057\uffa2\060\uffa2\065"
                + "\uffa2\070\uffa2\071\uffa2\001\002\000\024\012\060\013\050"
                + "\014\054\015\031\020\135\030\161\037\064\040\056\041"
                + "\016\001\002\000\026\012\060\013\050\014\054\015\031"
                + "\020\135\030\161\031\167\037\064\040\056\041\016\001"
                + "\002\000\016\011\153\021\147\022\146\024\151\025\150"
                + "\026\152\001\002\000\004\031\141\001\002\000\004\033"
                + "\142\001\002\000\056\005\013\006\047\010\052\012\060"
                + "\013\050\014\054\015\031\030\015\034\uffe0\037\046\040"
                + "\056\041\016\046\053\050\032\051\026\054\033\056\024"
                + "\057\027\060\040\065\036\070\025\071\045\001\002\000"
                + "\004\034\144\001\002\000\060\005\uff78\006\uff78\010\uff78"
                + "\012\uff78\013\uff78\014\uff78\015\uff78\030\uff78\034\uff78\037"
                + "\uff78\040\uff78\041\uff78\046\uff78\047\uff78\050\uff78\051\uff78"
                + "\054\uff78\056\uff78\057\uff78\060\uff78\065\uff78\070\uff78\071"
                + "\uff78\001\002\000\022\012\060\013\050\014\054\015\031"
                + "\030\063\037\064\040\056\041\016\001\002\000\022\012"
                + "\uff7e\013\uff7e\014\uff7e\015\uff7e\030\uff7e\037\uff7e\040\uff7e"
                + "\041\uff7e\001\002\000\022\012\uff7f\013\uff7f\014\uff7f\015"
                + "\uff7f\030\uff7f\037\uff7f\040\uff7f\041\uff7f\001\002\000\022"
                + "\012\uff7d\013\uff7d\014\uff7d\015\uff7d\030\uff7d\037\uff7d\040"
                + "\uff7d\041\uff7d\001\002\000\022\012\uff7a\013\uff7a\014\uff7a"
                + "\015\uff7a\030\uff7a\037\uff7a\040\uff7a\041\uff7a\001\002\000"
                + "\022\012\uff7c\013\uff7c\014\uff7c\015\uff7c\030\uff7c\037\uff7c"
                + "\040\uff7c\041\uff7c\001\002\000\022\012\uff7b\013\uff7b\014"
                + "\uff7b\015\uff7b\030\uff7b\037\uff7b\040\uff7b\041\uff7b\001\002"
                + "\000\012\016\157\017\156\031\uff84\033\uff84\001\002\000"
                + "\024\012\060\013\050\014\054\015\031\020\135\030\161"
                + "\037\064\040\056\041\016\001\002\000\024\012\uff80\013"
                + "\uff80\014\uff80\015\uff80\020\uff80\030\uff80\037\uff80\040\uff80"
                + "\041\uff80\001\002\000\024\012\uff81\013\uff81\014\uff81\015"
                + "\uff81\020\uff81\030\uff81\037\uff81\040\uff81\041\uff81\001\002"
                + "\000\006\031\uff87\033\uff87\001\002\000\024\012\060\013"
                + "\050\014\054\015\031\020\135\030\161\037\064\040\056"
                + "\041\016\001\002\000\006\031\uff82\033\uff82\001\002\000"
                + "\020\011\153\021\147\022\146\024\151\025\150\026\152"
                + "\031\066\001\002\000\004\031\165\001\002\000\012\016"
                + "\157\017\156\031\uff83\033\uff83\001\002\000\006\031\uff85"
                + "\033\uff85\001\002\000\004\033\202\001\002\000\006\031"
                + "\171\033\172\001\002\000\066\005\013\006\047\010\052"
                + "\012\060\013\050\014\054\015\031\016\157\017\156\030"
                + "\015\031\uff83\033\175\034\uffe0\037\046\040\056\041\016"
                + "\046\053\050\032\051\026\054\033\056\024\057\027\060"
                + "\040\065\036\070\025\071\045\001\002\000\056\005\013"
                + "\006\047\010\052\012\060\013\050\014\054\015\031\030"
                + "\015\034\uffe0\037\046\040\056\041\016\046\053\050\032"
                + "\051\026\054\033\056\024\057\027\060\040\065\036\070"
                + "\025\071\045\001\002\000\004\034\174\001\002\000\060"
                + "\005\uff76\006\uff76\010\uff76\012\uff76\013\uff76\014\uff76\015"
                + "\uff76\030\uff76\034\uff76\037\uff76\040\uff76\041\uff76\046\uff76"
                + "\047\uff76\050\uff76\051\uff76\054\uff76\056\uff76\057\uff76\060"
                + "\uff76\065\uff76\070\uff76\071\uff76\001\002\000\056\005\013"
                + "\006\047\010\052\012\060\013\050\014\054\015\031\030"
                + "\015\034\uffe0\037\046\040\056\041\016\046\053\050\032"
                + "\051\026\054\033\056\024\057\027\060\040\065\036\070"
                + "\025\071\045\001\002\000\004\034\177\001\002\000\060"
                + "\005\uff75\006\uff75\010\uff75\012\uff75\013\uff75\014\uff75\015"
                + "\uff75\030\uff75\034\uff75\037\uff75\040\uff75\041\uff75\046\uff75"
                + "\047\uff75\050\uff75\051\uff75\054\uff75\056\uff75\057\uff75\060"
                + "\uff75\065\uff75\070\uff75\071\uff75\001\002\000\004\034\201"
                + "\001\002\000\060\005\uff79\006\uff79\010\uff79\012\uff79\013"
                + "\uff79\014\uff79\015\uff79\030\uff79\034\uff79\037\uff79\040\uff79"
                + "\041\uff79\046\uff79\047\uff79\050\uff79\051\uff79\054\uff79\056"
                + "\uff79\057\uff79\060\uff79\065\uff79\070\uff79\071\uff79\001\002"
                + "\000\056\005\013\006\047\010\052\012\060\013\050\014"
                + "\054\015\031\030\015\034\uffe0\037\046\040\056\041\016"
                + "\046\053\050\032\051\026\054\033\056\024\057\027\060"
                + "\040\065\036\070\025\071\045\001\002\000\004\034\204"
                + "\001\002\000\060\005\uff77\006\uff77\010\uff77\012\uff77\013"
                + "\uff77\014\uff77\015\uff77\030\uff77\034\uff77\037\uff77\040\uff77"
                + "\041\uff77\046\uff77\047\uff77\050\uff77\051\uff77\054\uff77\056"
                + "\uff77\057\uff77\060\uff77\065\uff77\070\uff77\071\uff77\001\002"
                + "\000\006\031\uff86\033\uff86\001\002\000\026\012\060\013"
                + "\050\014\054\015\031\020\135\030\161\031\220\037\064"
                + "\040\056\041\016\001\002\000\004\031\210\001\002\000"
                + "\004\033\211\001\002\000\056\005\013\006\047\010\052"
                + "\012\060\013\050\014\054\015\031\030\015\034\uffe0\037"
                + "\046\040\056\041\016\046\053\050\032\051\026\054\033"
                + "\056\024\057\027\060\040\065\036\070\025\071\045\001"
                + "\002\000\004\034\213\001\002\000\062\005\uff8a\006\uff8a"
                + "\007\214\010\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\030"
                + "\uff8a\034\uff8a\037\uff8a\040\uff8a\041\uff8a\046\uff8a\047\uff8a"
                + "\050\uff8a\051\uff8a\054\uff8a\056\uff8a\057\uff8a\060\uff8a\065"
                + "\uff8a\070\uff8a\071\uff8a\001\002\000\004\033\215\001\002"
                + "\000\056\005\013\006\047\010\052\012\060\013\050\014"
                + "\054\015\031\030\015\034\uffe0\037\046\040\056\041\016"
                + "\046\053\050\032\051\026\054\033\056\024\057\027\060"
                + "\040\065\036\070\025\071\045\001\002\000\004\034\217"
                + "\001\002\000\060\005\uff91\006\uff91\010\uff91\012\uff91\013"
                + "\uff91\014\uff91\015\uff91\030\uff91\034\uff91\037\uff91\040\uff91"
                + "\041\uff91\046\uff91\047\uff91\050\uff91\051\uff91\054\uff91\056"
                + "\uff91\057\uff91\060\uff91\065\uff91\070\uff91\071\uff91\001\002"
                + "\000\004\033\254\001\002\000\006\031\222\033\223\001"
                + "\002\000\066\005\013\006\047\010\052\012\060\013\050"
                + "\014\054\015\031\016\157\017\156\030\015\031\uff83\033"
                + "\232\034\uffe0\037\046\040\056\041\016\046\053\050\032"
                + "\051\026\054\033\056\024\057\027\060\040\065\036\070"
                + "\025\071\045\001\002\000\056\005\013\006\047\010\052"
                + "\012\060\013\050\014\054\015\031\030\015\034\uffe0\037"
                + "\046\040\056\041\016\046\053\050\032\051\026\054\033"
                + "\056\024\057\027\060\040\065\036\070\025\071\045\001"
                + "\002\000\004\034\225\001\002\000\062\005\uff88\006\uff88"
                + "\007\226\010\uff88\012\uff88\013\uff88\014\uff88\015\uff88\030"
                + "\uff88\034\uff88\037\uff88\040\uff88\041\uff88\046\uff88\047\uff88"
                + "\050\uff88\051\uff88\054\uff88\056\uff88\057\uff88\060\uff88\065"
                + "\uff88\070\uff88\071\uff88\001\002\000\004\033\227\001\002"
                + "\000\056\005\013\006\047\010\052\012\060\013\050\014"
                + "\054\015\031\030\015\034\uffe0\037\046\040\056\041\016"
                + "\046\053\050\032\051\026\054\033\056\024\057\027\060"
                + "\040\065\036\070\025\071\045\001\002\000\004\034\231"
                + "\001\002\000\060\005\uff8f\006\uff8f\010\uff8f\012\uff8f\013"
                + "\uff8f\014\uff8f\015\uff8f\030\uff8f\034\uff8f\037\uff8f\040\uff8f"
                + "\041\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\054\uff8f\056"
                + "\uff8f\057\uff8f\060\uff8f\065\uff8f\070\uff8f\071\uff8f\001\002"
                + "\000\056\005\013\006\047\010\052\012\060\013\050\014"
                + "\054\015\031\030\015\034\uffe0\037\046\040\056\041\016"
                + "\046\053\050\032\051\026\054\033\056\024\057\027\060"
                + "\040\065\036\070\025\071\045\001\002\000\004\034\234"
                + "\001\002\000\004\007\235\001\002\000\004\033\236\001"
                + "\002\000\056\005\013\006\047\010\052\012\060\013\050"
                + "\014\054\015\031\030\015\034\uffe0\037\046\040\056\041"
                + "\016\046\053\050\032\051\026\054\033\056\024\057\027"
                + "\060\040\065\036\070\025\071\045\001\002\000\004\034"
                + "\240\001\002\000\060\005\uff8e\006\uff8e\010\uff8e\012\uff8e"
                + "\013\uff8e\014\uff8e\015\uff8e\030\uff8e\034\uff8e\037\uff8e\040"
                + "\uff8e\041\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\054\uff8e"
                + "\056\uff8e\057\uff8e\060\uff8e\065\uff8e\070\uff8e\071\uff8e\001"
                + "\002\000\004\034\242\001\002\000\064\005\uff93\006\uff93"
                + "\007\243\010\uff93\012\uff93\013\uff93\014\uff93\015\uff93\030"
                + "\uff93\033\244\034\uff93\037\uff93\040\uff93\041\uff93\046\uff93"
                + "\047\uff93\050\uff93\051\uff93\054\uff93\056\uff93\057\uff93\060"
                + "\uff93\065\uff93\070\uff93\071\uff93\001\002\000\060\005\013"
                + "\006\047\010\052\012\060\013\050\014\054\015\031\030"
                + "\015\033\247\034\uffe0\037\046\040\056\041\016\046\053"
                + "\050\032\051\026\054\033\056\024\057\027\060\040\065"
                + "\036\070\025\071\045\001\002\000\056\005\013\006\047"
                + "\010\052\012\060\013\050\014\054\015\031\030\015\034"
                + "\uffe0\037\046\040\056\041\016\046\053\050\032\051\026"
                + "\054\033\056\024\057\027\060\040\065\036\070\025\071"
                + "\045\001\002\000\004\034\246\001\002\000\060\005\uff8d"
                + "\006\uff8d\010\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\030"
                + "\uff8d\034\uff8d\037\uff8d\040\uff8d\041\uff8d\046\uff8d\047\uff8d"
                + "\050\uff8d\051\uff8d\054\uff8d\056\uff8d\057\uff8d\060\uff8d\065"
                + "\uff8d\070\uff8d\071\uff8d\001\002\000\056\005\013\006\047"
                + "\010\052\012\060\013\050\014\054\015\031\030\015\034"
                + "\uffe0\037\046\040\056\041\016\046\053\050\032\051\026"
                + "\054\033\056\024\057\027\060\040\065\036\070\025\071"
                + "\045\001\002\000\004\034\251\001\002\000\060\005\uff8c"
                + "\006\uff8c\010\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\030"
                + "\uff8c\034\uff8c\037\uff8c\040\uff8c\041\uff8c\046\uff8c\047\uff8c"
                + "\050\uff8c\051\uff8c\054\uff8c\056\uff8c\057\uff8c\060\uff8c\065"
                + "\uff8c\070\uff8c\071\uff8c\001\002\000\004\034\253\001\002"
                + "\000\060\005\uff94\006\uff94\010\uff94\012\uff94\013\uff94\014"
                + "\uff94\015\uff94\030\uff94\034\uff94\037\uff94\040\uff94\041\uff94"
                + "\046\uff94\047\uff94\050\uff94\051\uff94\054\uff94\056\uff94\057"
                + "\uff94\060\uff94\065\uff94\070\uff94\071\uff94\001\002\000\056"
                + "\005\013\006\047\010\052\012\060\013\050\014\054\015"
                + "\031\030\015\034\uffe0\037\046\040\056\041\016\046\053"
                + "\050\032\051\026\054\033\056\024\057\027\060\040\065"
                + "\036\070\025\071\045\001\002\000\004\034\256\001\002"
                + "\000\062\005\uff89\006\uff89\007\257\010\uff89\012\uff89\013"
                + "\uff89\014\uff89\015\uff89\030\uff89\034\uff89\037\uff89\040\uff89"
                + "\041\uff89\046\uff89\047\uff89\050\uff89\051\uff89\054\uff89\056"
                + "\uff89\057\uff89\060\uff89\065\uff89\070\uff89\071\uff89\001\002"
                + "\000\004\033\260\001\002\000\056\005\013\006\047\010"
                + "\052\012\060\013\050\014\054\015\031\030\015\034\uffe0"
                + "\037\046\040\056\041\016\046\053\050\032\051\026\054"
                + "\033\056\024\057\027\060\040\065\036\070\025\071\045"
                + "\001\002\000\004\034\262\001\002\000\060\005\uff90\006"
                + "\uff90\010\uff90\012\uff90\013\uff90\014\uff90\015\uff90\030\uff90"
                + "\034\uff90\037\uff90\040\uff90\041\uff90\046\uff90\047\uff90\050"
                + "\uff90\051\uff90\054\uff90\056\uff90\057\uff90\060\uff90\065\uff90"
                + "\070\uff90\071\uff90\001\002\000\004\064\275\001\002\000"
                + "\026\012\060\013\050\014\054\015\031\027\267\030\063"
                + "\031\270\037\064\040\056\041\016\001\002\000\004\027"
                + "\266\001\002\000\060\005\uffe5\006\uffe5\010\uffe5\012\uffe5"
                + "\013\uffe5\014\uffe5\015\uffe5\030\uffe5\034\uffe5\037\uffe5\040"
                + "\uffe5\041\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\054\uffe5"
                + "\056\uffe5\057\uffe5\060\uffe5\065\uffe5\070\uffe5\071\uffe5\001"
                + "\002\000\060\005\uffe4\006\uffe4\010\uffe4\012\uffe4\013\uffe4"
                + "\014\uffe4\015\uffe4\030\uffe4\034\uffe4\037\uffe4\040\uffe4\041"
                + "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\054\uffe4\056\uffe4"
                + "\057\uffe4\060\uffe4\065\uffe4\070\uffe4\071\uffe4\001\002\000"
                + "\064\005\uffe3\006\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3"
                + "\015\uffe3\027\271\030\uffe3\033\272\034\uffe3\037\uffe3\040"
                + "\uffe3\041\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\054\uffe3"
                + "\056\uffe3\057\uffe3\060\uffe3\065\uffe3\070\uffe3\071\uffe3\001"
                + "\002\000\060\005\uffed\006\uffed\010\uffed\012\uffed\013\uffed"
                + "\014\uffed\015\uffed\030\uffed\034\uffed\037\uffed\040\uffed\041"
                + "\uffed\046\uffed\047\uffed\050\uffed\051\uffed\054\uffed\056\uffed"
                + "\057\uffed\060\uffed\065\uffed\070\uffed\071\uffed\001\002\000"
                + "\056\005\013\006\047\010\052\012\060\013\050\014\054"
                + "\015\031\030\015\034\uffe0\037\046\040\056\041\016\046"
                + "\053\050\032\051\026\054\033\056\024\057\027\060\040"
                + "\065\036\070\025\071\045\001\002\000\004\034\274\001"
                + "\002\000\060\005\ufff8\006\ufff8\010\ufff8\012\ufff8\013\ufff8"
                + "\014\ufff8\015\ufff8\030\ufff8\034\ufff8\037\ufff8\040\ufff8\041"
                + "\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\054\ufff8\056\ufff8"
                + "\057\ufff8\060\ufff8\065\ufff8\070\ufff8\071\ufff8\001\002\000"
                + "\004\032\276\001\002\000\004\062\277\001\002\000\004"
                + "\040\300\001\002\000\004\032\301\001\002\000\004\063"
                + "\302\001\002\000\004\040\303\001\002\000\004\032\304"
                + "\001\002\000\004\066\305\001\002\000\004\040\306\001"
                + "\002\000\004\032\307\001\002\000\004\040\310\001\002"
                + "\000\004\027\311\001\002\000\060\005\uffd0\006\uffd0\010"
                + "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\030\uffd0\034\uffd0"
                + "\037\uffd0\040\uffd0\041\uffd0\046\uffd0\047\uffd0\050\uffd0\051"
                + "\uffd0\054\uffd0\056\uffd0\057\uffd0\060\uffd0\065\uffd0\070\uffd0"
                + "\071\uffd0\001\002\000\006\031\317\032\320\001\002\000"
                + "\004\032\314\001\002\000\004\037\315\001\002\000\004"
                + "\027\316\001\002\000\060\005\uffd3\006\uffd3\010\uffd3\012"
                + "\uffd3\013\uffd3\014\uffd3\015\uffd3\030\uffd3\034\uffd3\037\uffd3"
                + "\040\uffd3\041\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\054"
                + "\uffd3\056\uffd3\057\uffd3\060\uffd3\065\uffd3\070\uffd3\071\uffd3"
                + "\001\002\000\006\032\323\037\324\001\002\000\004\037"
                + "\321\001\002\000\004\027\322\001\002\000\060\005\uffd4"
                + "\006\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\030"
                + "\uffd4\034\uffd4\037\uffd4\040\uffd4\041\uffd4\046\uffd4\047\uffd4"
                + "\050\uffd4\051\uffd4\054\uffd4\056\uffd4\057\uffd4\060\uffd4\065"
                + "\uffd4\070\uffd4\071\uffd4\001\002\000\006\027\326\037\327"
                + "\001\002\000\004\027\325\001\002\000\060\005\uffd5\006"
                + "\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\030\uffd5"
                + "\034\uffd5\037\uffd5\040\uffd5\041\uffd5\046\uffd5\047\uffd5\050"
                + "\uffd5\051\uffd5\054\uffd5\056\uffd5\057\uffd5\060\uffd5\065\uffd5"
                + "\070\uffd5\071\uffd5\001\002\000\060\005\uffd6\006\uffd6\010"
                + "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\030\uffd6\034\uffd6"
                + "\037\uffd6\040\uffd6\041\uffd6\046\uffd6\047\uffd6\050\uffd6\051"
                + "\uffd6\054\uffd6\056\uffd6\057\uffd6\060\uffd6\065\uffd6\070\uffd6"
                + "\071\uffd6\001\002\000\062\005\uffd7\006\uffd7\010\uffd7\012"
                + "\uffd7\013\uffd7\014\uffd7\015\uffd7\027\330\030\uffd7\034\uffd7"
                + "\037\uffd7\040\uffd7\041\uffd7\046\uffd7\047\uffd7\050\uffd7\051"
                + "\uffd7\054\uffd7\056\uffd7\057\uffd7\060\uffd7\065\uffd7\070\uffd7"
                + "\071\uffd7\001\002\000\060\005\uffd8\006\uffd8\010\uffd8\012"
                + "\uffd8\013\uffd8\014\uffd8\015\uffd8\030\uffd8\034\uffd8\037\uffd8"
                + "\040\uffd8\041\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\054"
                + "\uffd8\056\uffd8\057\uffd8\060\uffd8\065\uffd8\070\uffd8\071\uffd8"
                + "\001\002\000\004\064\u0151\001\002\000\006\064\333\067"
                + "\334\001\002\000\004\032\u0145\001\002\000\010\032\336"
                + "\037\337\064\335\001\002\000\006\032\370\062\367\001"
                + "\002\000\004\062\354\001\002\000\004\032\340\001\002"
                + "\000\004\062\341\001\002\000\004\040\342\001\002\000"
                + "\004\032\343\001\002\000\004\063\344\001\002\000\004"
                + "\040\345\001\002\000\004\032\346\001\002\000\004\066"
                + "\347\001\002\000\004\040\350\001\002\000\004\032\351"
                + "\001\002\000\004\040\352\001\002\000\004\027\353\001"
                + "\002\000\060\005\uffd1\006\uffd1\010\uffd1\012\uffd1\013\uffd1"
                + "\014\uffd1\015\uffd1\030\uffd1\034\uffd1\037\uffd1\040\uffd1\041"
                + "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\054\uffd1\056\uffd1"
                + "\057\uffd1\060\uffd1\065\uffd1\070\uffd1\071\uffd1\001\002\000"
                + "\004\040\355\001\002\000\004\032\356\001\002\000\004"
                + "\063\357\001\002\000\004\040\360\001\002\000\004\032"
                + "\361\001\002\000\004\066\362\001\002\000\004\040\363"
                + "\001\002\000\004\032\364\001\002\000\004\040\365\001"
                + "\002\000\004\027\366\001\002\000\060\005\uffcd\006\uffcd"
                + "\010\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\030\uffcd\034"
                + "\uffcd\037\uffcd\040\uffcd\041\uffcd\046\uffcd\047\uffcd\050\uffcd"
                + "\051\uffcd\054\uffcd\056\uffcd\057\uffcd\060\uffcd\065\uffcd\070"
                + "\uffcd\071\uffcd\001\002\000\004\040\u013b\001\002\000\006"
                + "\040\371\062\372\001\002\000\004\032\u0132\001\002\000"
                + "\006\032\374\040\373\001\002\000\006\032\u0106\063\u0105"
                + "\001\002\000\004\063\375\001\002\000\004\040\376\001"
                + "\002\000\004\032\377\001\002\000\004\066\u0100\001\002"
                + "\000\004\040\u0101\001\002\000\004\032\u0102\001\002\000"
                + "\004\040\u0103\001\002\000\004\027\u0104\001\002\000\060"
                + "\005\uffca\006\uffca\010\uffca\012\uffca\013\uffca\014\uffca\015"
                + "\uffca\030\uffca\034\uffca\037\uffca\040\uffca\041\uffca\046\uffca"
                + "\047\uffca\050\uffca\051\uffca\054\uffca\056\uffca\057\uffca\060"
                + "\uffca\065\uffca\070\uffca\071\uffca\001\002\000\004\040\u012b"
                + "\001\002\000\006\040\u0107\063\u0108\001\002\000\004\032"
                + "\u0125\001\002\000\006\032\u010a\040\u0109\001\002\000\006"
                + "\032\u0110\066\u0111\001\002\000\004\066\u010b\001\002\000"
                + "\004\040\u010c\001\002\000\004\032\u010d\001\002\000\004"
                + "\040\u010e\001\002\000\004\027\u010f\001\002\000\060\005"
                + "\uffc7\006\uffc7\010\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7"
                + "\030\uffc7\034\uffc7\037\uffc7\040\uffc7\041\uffc7\046\uffc7\047"
                + "\uffc7\050\uffc7\051\uffc7\054\uffc7\056\uffc7\057\uffc7\060\uffc7"
                + "\065\uffc7\070\uffc7\071\uffc7\001\002\000\006\040\u0116\066"
                + "\u0117\001\002\000\004\040\u0112\001\002\000\004\032\u0113"
                + "\001\002\000\004\040\u0114\001\002\000\004\027\u0115\001"
                + "\002\000\060\005\uffc6\006\uffc6\010\uffc6\012\uffc6\013\uffc6"
                + "\014\uffc6\015\uffc6\030\uffc6\034\uffc6\037\uffc6\040\uffc6\041"
                + "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\054\uffc6\056\uffc6"
                + "\057\uffc6\060\uffc6\065\uffc6\070\uffc6\071\uffc6\001\002\000"
                + "\004\032\u0122\001\002\000\006\032\u0119\040\u0118\001\002"
                + "\000\006\032\u011d\040\u011c\001\002\000\004\040\u011a\001"
                + "\002\000\004\027\u011b\001\002\000\060\005\uffc4\006\uffc4"
                + "\010\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\030\uffc4\034"
                + "\uffc4\037\uffc4\040\uffc4\041\uffc4\046\uffc4\047\uffc4\050\uffc4"
                + "\051\uffc4\054\uffc4\056\uffc4\057\uffc4\060\uffc4\065\uffc4\070"
                + "\uffc4\071\uffc4\001\002\000\004\027\u0121\001\002\000\006"
                + "\027\u011f\040\u011e\001\002\000\062\005\uffc1\006\uffc1\010"
                + "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\027\u0120\030\uffc1"
                + "\034\uffc1\037\uffc1\040\uffc1\041\uffc1\046\uffc1\047\uffc1\050"
                + "\uffc1\051\uffc1\054\uffc1\056\uffc1\057\uffc1\060\uffc1\065\uffc1"
                + "\070\uffc1\071\uffc1\001\002\000\060\005\uffc2\006\uffc2\010"
                + "\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\030\uffc2\034\uffc2"
                + "\037\uffc2\040\uffc2\041\uffc2\046\uffc2\047\uffc2\050\uffc2\051"
                + "\uffc2\054\uffc2\056\uffc2\057\uffc2\060\uffc2\065\uffc2\070\uffc2"
                + "\071\uffc2\001\002\000\060\005\uffd2\006\uffd2\010\uffd2\012"
                + "\uffd2\013\uffd2\014\uffd2\015\uffd2\030\uffd2\034\uffd2\037\uffd2"
                + "\040\uffd2\041\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\054"
                + "\uffd2\056\uffd2\057\uffd2\060\uffd2\065\uffd2\070\uffd2\071\uffd2"
                + "\001\002\000\060\005\uffc3\006\uffc3\010\uffc3\012\uffc3\013"
                + "\uffc3\014\uffc3\015\uffc3\030\uffc3\034\uffc3\037\uffc3\040\uffc3"
                + "\041\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\054\uffc3\056"
                + "\uffc3\057\uffc3\060\uffc3\065\uffc3\070\uffc3\071\uffc3\001\002"
                + "\000\004\040\u0123\001\002\000\004\027\u0124\001\002\000"
                + "\060\005\uffc5\006\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5"
                + "\015\uffc5\030\uffc5\034\uffc5\037\uffc5\040\uffc5\041\uffc5\046"
                + "\uffc5\047\uffc5\050\uffc5\051\uffc5\054\uffc5\056\uffc5\057\uffc5"
                + "\060\uffc5\065\uffc5\070\uffc5\071\uffc5\001\002\000\004\066"
                + "\u0126\001\002\000\004\040\u0127\001\002\000\004\032\u0128"
                + "\001\002\000\004\040\u0129\001\002\000\004\027\u012a\001"
                + "\002\000\060\005\uffc8\006\uffc8\010\uffc8\012\uffc8\013\uffc8"
                + "\014\uffc8\015\uffc8\030\uffc8\034\uffc8\037\uffc8\040\uffc8\041"
                + "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\054\uffc8\056\uffc8"
                + "\057\uffc8\060\uffc8\065\uffc8\070\uffc8\071\uffc8\001\002\000"
                + "\004\032\u012c\001\002\000\004\066\u012d\001\002\000\004"
                + "\040\u012e\001\002\000\004\032\u012f\001\002\000\004\040"
                + "\u0130\001\002\000\004\027\u0131\001\002\000\060\005\uffc9"
                + "\006\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\030"
                + "\uffc9\034\uffc9\037\uffc9\040\uffc9\041\uffc9\046\uffc9\047\uffc9"
                + "\050\uffc9\051\uffc9\054\uffc9\056\uffc9\057\uffc9\060\uffc9\065"
                + "\uffc9\070\uffc9\071\uffc9\001\002\000\004\063\u0133\001\002"
                + "\000\004\040\u0134\001\002\000\004\032\u0135\001\002\000"
                + "\004\066\u0136\001\002\000\004\040\u0137\001\002\000\004"
                + "\032\u0138\001\002\000\004\040\u0139\001\002\000\004\027"
                + "\u013a\001\002\000\060\005\uffcb\006\uffcb\010\uffcb\012\uffcb"
                + "\013\uffcb\014\uffcb\015\uffcb\030\uffcb\034\uffcb\037\uffcb\040"
                + "\uffcb\041\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\054\uffcb"
                + "\056\uffcb\057\uffcb\060\uffcb\065\uffcb\070\uffcb\071\uffcb\001"
                + "\002\000\004\032\u013c\001\002\000\004\063\u013d\001\002"
                + "\000\004\040\u013e\001\002\000\004\032\u013f\001\002\000"
                + "\004\066\u0140\001\002\000\004\040\u0141\001\002\000\004"
                + "\032\u0142\001\002\000\004\040\u0143\001\002\000\004\027"
                + "\u0144\001\002\000\060\005\uffcc\006\uffcc\010\uffcc\012\uffcc"
                + "\013\uffcc\014\uffcc\015\uffcc\030\uffcc\034\uffcc\037\uffcc\040"
                + "\uffcc\041\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\054\uffcc"
                + "\056\uffcc\057\uffcc\060\uffcc\065\uffcc\070\uffcc\071\uffcc\001"
                + "\002\000\004\062\u0146\001\002\000\004\040\u0147\001\002"
                + "\000\004\032\u0148\001\002\000\004\063\u0149\001\002\000"
                + "\004\040\u014a\001\002\000\004\032\u014b\001\002\000\004"
                + "\066\u014c\001\002\000\004\040\u014d\001\002\000\004\032"
                + "\u014e\001\002\000\004\040\u014f\001\002\000\004\027\u0150"
                + "\001\002\000\060\005\uffce\006\uffce\010\uffce\012\uffce\013"
                + "\uffce\014\uffce\015\uffce\030\uffce\034\uffce\037\uffce\040\uffce"
                + "\041\uffce\046\uffce\047\uffce\050\uffce\051\uffce\054\uffce\056"
                + "\uffce\057\uffce\060\uffce\065\uffce\070\uffce\071\uffce\001\002"
                + "\000\004\032\u0152\001\002\000\004\062\u0153\001\002\000"
                + "\004\040\u0154\001\002\000\004\032\u0155\001\002\000\004"
                + "\063\u0156\001\002\000\004\040\u0157\001\002\000\004\032"
                + "\u0158\001\002\000\004\066\u0159\001\002\000\004\040\u015a"
                + "\001\002\000\004\032\u015b\001\002\000\004\040\u015c\001"
                + "\002\000\004\027\u015d\001\002\000\060\005\uffcf\006\uffcf"
                + "\010\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\030\uffcf\034"
                + "\uffcf\037\uffcf\040\uffcf\041\uffcf\046\uffcf\047\uffcf\050\uffcf"
                + "\051\uffcf\054\uffcf\056\uffcf\057\uffcf\060\uffcf\065\uffcf\070"
                + "\uffcf\071\uffcf\001\002\000\004\031\u016e\001\002\000\006"
                + "\030\u0160\031\u0161\001\002\000\006\031\u0165\033\u0166\001"
                + "\002\000\004\033\u0162\001\002\000\056\005\013\006\047"
                + "\010\052\012\060\013\050\014\054\015\031\030\015\034"
                + "\uffe0\037\046\040\056\041\016\046\053\050\032\051\026"
                + "\054\033\056\024\057\027\060\040\065\036\070\025\071"
                + "\045\001\002\000\004\034\u0164\001\002\000\060\005\ufff6"
                + "\006\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\030"
                + "\ufff6\034\ufff6\037\ufff6\040\ufff6\041\ufff6\046\ufff6\047\ufff6"
                + "\050\ufff6\051\ufff6\054\ufff6\056\ufff6\057\ufff6\060\ufff6\065"
                + "\ufff6\070\ufff6\071\ufff6\001\002\000\060\005\013\006\047"
                + "\010\052\012\060\013\050\014\054\015\031\030\015\033"
                + "\u0169\034\uffe0\037\046\040\056\041\016\046\053\050\032"
                + "\051\026\054\033\056\024\057\027\060\040\065\036\070"
                + "\025\071\045\001\002\000\056\005\013\006\047\010\052"
                + "\012\060\013\050\014\054\015\031\030\015\034\uffe0\037"
                + "\046\040\056\041\016\046\053\050\032\051\026\054\033"
                + "\056\024\057\027\060\040\065\036\070\025\071\045\001"
                + "\002\000\004\034\u0168\001\002\000\060\005\ufff5\006\ufff5"
                + "\010\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\030\ufff5\034"
                + "\ufff5\037\ufff5\040\ufff5\041\ufff5\046\ufff5\047\ufff5\050\ufff5"
                + "\051\ufff5\054\ufff5\056\ufff5\057\ufff5\060\ufff5\065\ufff5\070"
                + "\ufff5\071\ufff5\001\002\000\056\005\013\006\047\010\052"
                + "\012\060\013\050\014\054\015\031\030\015\034\uffe0\037"
                + "\046\040\056\041\016\046\053\050\032\051\026\054\033"
                + "\056\024\057\027\060\040\065\036\070\025\071\045\001"
                + "\002\000\004\034\u016b\001\002\000\060\005\ufff4\006\ufff4"
                + "\010\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\030\ufff4\034"
                + "\ufff4\037\ufff4\040\ufff4\041\ufff4\046\ufff4\047\ufff4\050\ufff4"
                + "\051\ufff4\054\ufff4\056\ufff4\057\ufff4\060\ufff4\065\ufff4\070"
                + "\ufff4\071\ufff4\001\002\000\004\034\u016d\001\002\000\060"
                + "\005\ufff9\006\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015"
                + "\ufff9\030\ufff9\034\ufff9\037\ufff9\040\ufff9\041\ufff9\046\ufff9"
                + "\047\ufff9\050\ufff9\051\ufff9\054\ufff9\056\ufff9\057\ufff9\060"
                + "\ufff9\065\ufff9\070\ufff9\071\ufff9\001\002\000\004\033\u016f"
                + "\001\002\000\056\005\013\006\047\010\052\012\060\013"
                + "\050\014\054\015\031\030\015\034\uffe0\037\046\040\056"
                + "\041\016\046\053\050\032\051\026\054\033\056\024\057"
                + "\027\060\040\065\036\070\025\071\045\001\002\000\004"
                + "\034\u0171\001\002\000\060\005\ufff7\006\ufff7\010\ufff7\012"
                + "\ufff7\013\ufff7\014\ufff7\015\ufff7\030\ufff7\034\ufff7\037\ufff7"
                + "\040\ufff7\041\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\054"
                + "\ufff7\056\ufff7\057\ufff7\060\ufff7\065\ufff7\070\ufff7\071\ufff7"
                + "\001\002\000\006\011\u0174\027\u0173\001\002\000\060\005"
                + "\uffab\006\uffab\010\uffab\012\uffab\013\uffab\014\uffab\015\uffab"
                + "\030\uffab\034\uffab\037\uffab\040\uffab\041\uffab\046\uffab\047"
                + "\uffab\050\uffab\051\uffab\054\uffab\056\uffab\057\uffab\060\uffab"
                + "\065\uffab\070\uffab\071\uffab\001\002\000\004\064\u0175\001"
                + "\002\000\004\027\u0176\001\002\000\060\005\uffa8\006\uffa8"
                + "\010\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\030\uffa8\034"
                + "\uffa8\037\uffa8\040\uffa8\041\uffa8\046\uffa8\047\uffa8\050\uffa8"
                + "\051\uffa8\054\uffa8\056\uffa8\057\uffa8\060\uffa8\065\uffa8\070"
                + "\uffa8\071\uffa8\001\002\000\030\011\uffb6\016\uffb6\017\uffb6"
                + "\021\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\031"
                + "\uffb6\033\uffb6\001\002\000\060\005\uffea\006\uffea\010\uffea"
                + "\012\uffea\013\uffea\014\uffea\015\uffea\030\uffea\034\uffea\037"
                + "\uffea\040\uffea\041\uffea\046\uffea\047\uffea\050\uffea\051\uffea"
                + "\054\uffea\056\uffea\057\uffea\060\uffea\065\uffea\070\uffea\071"
                + "\uffea\001\002\000\004\027\u017a\001\002\000\060\005\uffeb"
                + "\006\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\030"
                + "\uffeb\034\uffeb\037\uffeb\040\uffeb\041\uffeb\046\uffeb\047\uffeb"
                + "\050\uffeb\051\uffeb\054\uffeb\056\uffeb\057\uffeb\060\uffeb\065"
                + "\uffeb\070\uffeb\071\uffeb\001\002\000\004\027\u017c\001\002"
                + "\000\060\005\uffa0\006\uffa0\010\uffa0\012\uffa0\013\uffa0\014"
                + "\uffa0\015\uffa0\030\uffa0\034\uffa0\037\uffa0\040\uffa0\041\uffa0"
                + "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\054\uffa0\056\uffa0\057"
                + "\uffa0\060\uffa0\065\uffa0\070\uffa0\071\uffa0\001\002\000\006"
                + "\031\u0182\032\u0183\001\002\000\004\032\u017f\001\002\000"
                + "\004\037\u0180\001\002\000\004\027\u0181\001\002\000\060"
                + "\005\uffdd\006\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015"
                + "\uffdd\030\uffdd\034\uffdd\037\uffdd\040\uffdd\041\uffdd\046\uffdd"
                + "\047\uffdd\050\uffdd\051\uffdd\054\uffdd\056\uffdd\057\uffdd\060"
                + "\uffdd\065\uffdd\070\uffdd\071\uffdd\001\002\000\006\032\u0186"
                + "\037\u0187\001\002\000\004\037\u0184\001\002\000\004\027"
                + "\u0185\001\002\000\060\005\uffdc\006\uffdc\010\uffdc\012\uffdc"
                + "\013\uffdc\014\uffdc\015\uffdc\030\uffdc\034\uffdc\037\uffdc\040"
                + "\uffdc\041\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\054\uffdc"
                + "\056\uffdc\057\uffdc\060\uffdc\065\uffdc\070\uffdc\071\uffdc\001"
                + "\002\000\006\027\u0189\037\u018a\001\002\000\004\027\u0188"
                + "\001\002\000\060\005\uffdb\006\uffdb\010\uffdb\012\uffdb\013"
                + "\uffdb\014\uffdb\015\uffdb\030\uffdb\034\uffdb\037\uffdb\040\uffdb"
                + "\041\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\054\uffdb\056"
                + "\uffdb\057\uffdb\060\uffdb\065\uffdb\070\uffdb\071\uffdb\001\002"
                + "\000\060\005\uffda\006\uffda\010\uffda\012\uffda\013\uffda\014"
                + "\uffda\015\uffda\030\uffda\034\uffda\037\uffda\040\uffda\041\uffda"
                + "\046\uffda\047\uffda\050\uffda\051\uffda\054\uffda\056\uffda\057"
                + "\uffda\060\uffda\065\uffda\070\uffda\071\uffda\001\002\000\062"
                + "\005\uffd9\006\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015"
                + "\uffd9\027\u018b\030\uffd9\034\uffd9\037\uffd9\040\uffd9\041\uffd9"
                + "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\054\uffd9\056\uffd9\057"
                + "\uffd9\060\uffd9\065\uffd9\070\uffd9\071\uffd9\001\002\000\060"
                + "\005\uffdf\006\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015"
                + "\uffdf\030\uffdf\034\uffdf\037\uffdf\040\uffdf\041\uffdf\046\uffdf"
                + "\047\uffdf\050\uffdf\051\uffdf\054\uffdf\056\uffdf\057\uffdf\060"
                + "\uffdf\065\uffdf\070\uffdf\071\uffdf\001\002\000\004\047\u018d"
                + "\001\002\000\004\002\ufffd\001\002\000\006\034\uffe1\047"
                + "\uffe1\001\002\000\030\011\uffb8\016\uffb8\017\uffb8\021\uffb8"
                + "\022\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\031\uffb8\033"
                + "\uffb8\001\002\000\006\027\u019b\032\u019a\001\002\000\004"
                + "\031\u0192\001\002\000\004\033\u0193\001\002\000\056\005"
                + "\013\006\047\010\052\012\060\013\050\014\054\015\031"
                + "\030\015\034\uffe0\037\046\040\056\041\016\046\053\050"
                + "\032\051\026\054\033\056\024\057\027\060\040\065\036"
                + "\070\025\071\045\001\002\000\004\034\u0195\001\002\000"
                + "\062\005\uff8b\006\uff8b\007\u0196\010\uff8b\012\uff8b\013\uff8b"
                + "\014\uff8b\015\uff8b\030\uff8b\034\uff8b\037\uff8b\040\uff8b\041"
                + "\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\054\uff8b\056\uff8b"
                + "\057\uff8b\060\uff8b\065\uff8b\070\uff8b\071\uff8b\001\002\000"
                + "\004\033\u0197\001\002\000\056\005\013\006\047\010\052"
                + "\012\060\013\050\014\054\015\031\030\015\034\uffe0\037"
                + "\046\040\056\041\016\046\053\050\032\051\026\054\033"
                + "\056\024\057\027\060\040\065\036\070\025\071\045\001"
                + "\002\000\004\034\u0199\001\002\000\060\005\uff92\006\uff92"
                + "\010\uff92\012\uff92\013\uff92\014\uff92\015\uff92\030\uff92\034"
                + "\uff92\037\uff92\040\uff92\041\uff92\046\uff92\047\uff92\050\uff92"
                + "\051\uff92\054\uff92\056\uff92\057\uff92\060\uff92\065\uff92\070"
                + "\uff92\071\uff92\001\002\000\004\037\u019c\001\002\000\060"
                + "\005\uffe6\006\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015"
                + "\uffe6\030\uffe6\034\uffe6\037\uffe6\040\uffe6\041\uffe6\046\uffe6"
                + "\047\uffe6\050\uffe6\051\uffe6\054\uffe6\056\uffe6\057\uffe6\060"
                + "\uffe6\065\uffe6\070\uffe6\071\uffe6\001\002\000\004\027\u019d"
                + "\001\002\000\060\005\uffde\006\uffde\010\uffde\012\uffde\013"
                + "\uffde\014\uffde\015\uffde\030\uffde\034\uffde\037\uffde\040\uffde"
                + "\041\uffde\046\uffde\047\uffde\050\uffde\051\uffde\054\uffde\056"
                + "\uffde\057\uffde\060\uffde\065\uffde\070\uffde\071\uffde\001\002"
                + "\000\006\011\115\027\u01a0\001\002\000\060\005\uffb2\006"
                + "\uffb2\010\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\030\uffb2"
                + "\034\uffb2\037\uffb2\040\uffb2\041\uffb2\046\uffb2\047\uffb2\050"
                + "\uffb2\051\uffb2\054\uffb2\056\uffb2\057\uffb2\060\uffb2\065\uffb2"
                + "\070\uffb2\071\uffb2\001\002\000\060\005\uffb1\006\uffb1\010"
                + "\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\030\uffb1\034\uffb1"
                + "\037\uffb1\040\uffb1\041\uffb1\046\uffb1\047\uffb1\050\uffb1\051"
                + "\uffb1\054\uffb1\056\uffb1\057\uffb1\060\uffb1\065\uffb1\070\uffb1"
                + "\071\uffb1\001\002\000\060\005\013\006\047\010\052\012"
                + "\060\013\050\014\054\015\031\030\015\033\u01a6\034\uffe0"
                + "\037\046\040\056\041\016\046\053\050\032\051\026\054"
                + "\033\056\024\057\027\060\040\065\036\070\025\071\045"
                + "\001\002\000\056\005\013\006\047\010\052\012\060\013"
                + "\050\014\054\015\031\030\015\034\uffe0\037\046\040\056"
                + "\041\016\046\053\050\032\051\026\054\033\056\024\057"
                + "\027\060\040\065\036\070\025\071\045\001\002\000\004"
                + "\034\u01a4\001\002\000\004\047\u01a5\001\002\000\004\002"
                + "\ufffc\001\002\000\060\005\013\006\047\010\052\012\060"
                + "\013\050\014\054\015\031\030\015\034\uffe0\037\046\040"
                + "\056\041\016\046\053\047\uffe0\050\032\051\026\054\033"
                + "\056\024\057\027\060\040\065\036\070\025\071\045\001"
                + "\002\000\004\034\u01a8\001\002\000\004\047\u01a9\001\002"
                + "\000\004\002\ufffb\001\002\000\006\034\u01ab\047\u01ac\001"
                + "\002\000\006\002\uffff\047\u01ad\001\002\000\004\002\ufffa"
                + "\001\002\000\004\002\000\001\002\000\004\002\001\001"
                + "\002\000\004\033\u01b0\001\002\000\056\005\013\006\047"
                + "\010\052\012\060\013\050\014\054\015\031\030\015\034"
                + "\uffe0\037\046\040\056\041\016\046\053\050\032\051\026"
                + "\054\033\056\024\057\027\060\040\065\036\070\025\071"
                + "\045\001\002\000\004\034\u01b2\001\002\000\004\047\u01b3"
                + "\001\002\000\004\002\ufffe\001\002"
    } );

    /**
     * Access to parse-action table.
     */
    public short[][] action_table()
    {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings( new String[]
            {
                "\000\u01b1\000\004\002\004\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\046\003\020\004\040\005\021\006\017\007"
                + "\022\010\033\011\043\012\036\013\056\014\027\015\013"
                + "\021\011\024\034\025\050\026\016\031\042\032\041\033"
                + "\054\001\001\000\002\001\001\000\002\001\001\000\004"
                + "\010\u019e\001\001\000\012\013\162\014\027\016\u0190\021"
                + "\011\001\001\000\006\014\027\021\u018e\001\001\000\002"
                + "\001\001\000\002\001\001\000\044\003\020\004\040\006"
                + "\u018d\007\022\010\033\011\043\012\036\013\056\014\027"
                + "\015\013\021\011\024\034\025\050\026\016\031\042\032"
                + "\041\033\054\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\010\013\u0178\014\027\021\011\001\001\000\010\013\u0176"
                + "\014\027\021\011\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\006\014\027\021\070\001"
                + "\001\000\012\013\136\014\027\016\206\021\011\001\001"
                + "\000\002\001\001\000\002\001\001\000\012\013\136\014"
                + "\027\016\137\021\011\001\001\000\004\015\073\001\001"
                + "\000\002\001\001\000\002\001\001\000\006\014\027\021"
                + "\061\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\010\013\064\014\027\021"
                + "\011\001\001\000\006\014\027\021\070\001\001\000\002"
                + "\001\001\000\004\014\066\001\001\000\010\013\067\014"
                + "\027\021\011\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\004\010\112\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\010\013\116\014\027\021\011\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\012\013\136\014\027\016\204"
                + "\021\011\001\001\000\012\013\162\014\027\016\167\021"
                + "\011\001\001\000\004\020\144\001\001\000\002\001\001"
                + "\000\002\001\001\000\046\003\020\004\040\005\142\006"
                + "\017\007\022\010\033\011\043\012\036\013\056\014\027"
                + "\015\013\021\011\024\034\025\050\026\016\031\042\032"
                + "\041\033\054\001\001\000\002\001\001\000\002\001\001"
                + "\000\010\013\153\014\027\021\011\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\006\017\154\023"
                + "\157\001\001\000\012\013\136\014\027\016\161\021\011"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\012\013\162\014\027\016\163\021\011\001\001"
                + "\000\002\001\001\000\004\020\144\001\001\000\002\001"
                + "\001\000\006\017\154\023\165\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\052\003\020\004"
                + "\040\005\175\006\017\007\022\010\033\011\043\012\036"
                + "\013\056\014\027\015\013\017\154\021\011\023\165\024"
                + "\034\025\050\026\016\031\042\032\041\033\054\001\001"
                + "\000\046\003\020\004\040\005\172\006\017\007\022\010"
                + "\033\011\043\012\036\013\056\014\027\015\013\021\011"
                + "\024\034\025\050\026\016\031\042\032\041\033\054\001"
                + "\001\000\002\001\001\000\002\001\001\000\046\003\020"
                + "\004\040\005\177\006\017\007\022\010\033\011\043\012"
                + "\036\013\056\014\027\015\013\021\011\024\034\025\050"
                + "\026\016\031\042\032\041\033\054\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\046\003\020\004\040\005\202\006\017\007\022\010"
                + "\033\011\043\012\036\013\056\014\027\015\013\021\011"
                + "\024\034\025\050\026\016\031\042\032\041\033\054\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\012\013\162\014\027\016\220\021\011\001\001\000"
                + "\002\001\001\000\002\001\001\000\046\003\020\004\040"
                + "\005\211\006\017\007\022\010\033\011\043\012\036\013"
                + "\056\014\027\015\013\021\011\024\034\025\050\026\016"
                + "\031\042\032\041\033\054\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\046\003\020\004\040"
                + "\005\215\006\017\007\022\010\033\011\043\012\036\013"
                + "\056\014\027\015\013\021\011\024\034\025\050\026\016"
                + "\031\042\032\041\033\054\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\052"
                + "\003\020\004\040\005\232\006\017\007\022\010\033\011"
                + "\043\012\036\013\056\014\027\015\013\017\154\021\011"
                + "\023\165\024\034\025\050\026\016\031\042\032\041\033"
                + "\054\001\001\000\046\003\020\004\040\005\223\006\017"
                + "\007\022\010\033\011\043\012\036\013\056\014\027\015"
                + "\013\021\011\024\034\025\050\026\016\031\042\032\041"
                + "\033\054\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\046\003\020\004\040\005\227\006\017"
                + "\007\022\010\033\011\043\012\036\013\056\014\027\015"
                + "\013\021\011\024\034\025\050\026\016\031\042\032\041"
                + "\033\054\001\001\000\002\001\001\000\002\001\001\000"
                + "\046\003\020\004\040\005\240\006\017\007\022\010\033"
                + "\011\043\012\036\013\056\014\027\015\013\021\011\024"
                + "\034\025\050\026\016\031\042\032\041\033\054\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\046\003\020\004\040\005\236\006\017\007\022\010\033"
                + "\011\043\012\036\013\056\014\027\015\013\021\011\024"
                + "\034\025\050\026\016\031\042\032\041\033\054\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\046\003\020\004\040\005\247\006\017"
                + "\007\022\010\033\011\043\012\036\013\056\014\027\015"
                + "\013\021\011\024\034\025\050\026\016\031\042\032\041"
                + "\033\054\001\001\000\046\003\020\004\040\005\244\006"
                + "\017\007\022\010\033\011\043\012\036\013\056\014\027"
                + "\015\013\021\011\024\034\025\050\026\016\031\042\032"
                + "\041\033\054\001\001\000\002\001\001\000\002\001\001"
                + "\000\046\003\020\004\040\005\251\006\017\007\022\010"
                + "\033\011\043\012\036\013\056\014\027\015\013\021\011"
                + "\024\034\025\050\026\016\031\042\032\041\033\054\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\046\003\020\004\040\005\254\006"
                + "\017\007\022\010\033\011\043\012\036\013\056\014\027"
                + "\015\013\021\011\024\034\025\050\026\016\031\042\032"
                + "\041\033\054\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\046\003\020\004\040\005\260\006"
                + "\017\007\022\010\033\011\043\012\036\013\056\014\027"
                + "\015\013\021\011\024\034\025\050\026\016\031\042\032"
                + "\041\033\054\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\010\013\064\014\027\021\011\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\046\003\020\004"
                + "\040\005\272\006\017\007\022\010\033\011\043\012\036"
                + "\013\056\014\027\015\013\021\011\024\034\025\050\026"
                + "\016\031\042\032\041\033\054\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\046\003\020\004\040\005\u0162\006\017\007\022"
                + "\010\033\011\043\012\036\013\056\014\027\015\013\021"
                + "\011\024\034\025\050\026\016\031\042\032\041\033\054"
                + "\001\001\000\002\001\001\000\002\001\001\000\046\003"
                + "\020\004\040\005\u0169\006\017\007\022\010\033\011\043"
                + "\012\036\013\056\014\027\015\013\021\011\024\034\025"
                + "\050\026\016\031\042\032\041\033\054\001\001\000\046"
                + "\003\020\004\040\005\u0166\006\017\007\022\010\033\011"
                + "\043\012\036\013\056\014\027\015\013\021\011\024\034"
                + "\025\050\026\016\031\042\032\041\033\054\001\001\000"
                + "\002\001\001\000\002\001\001\000\046\003\020\004\040"
                + "\005\u016b\006\017\007\022\010\033\011\043\012\036\013"
                + "\056\014\027\015\013\021\011\024\034\025\050\026\016"
                + "\031\042\032\041\033\054\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\046\003\020\004\040\005\u016f\006\017\007"
                + "\022\010\033\011\043\012\036\013\056\014\027\015\013"
                + "\021\011\024\034\025\050\026\016\031\042\032\041\033"
                + "\054\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\046\003\020\004\040\005\u0193\006\017\007\022\010"
                + "\033\011\043\012\036\013\056\014\027\015\013\021\011"
                + "\024\034\025\050\026\016\031\042\032\041\033\054\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\046\003\020\004\040\005\u0197\006\017\007\022\010"
                + "\033\011\043\012\036\013\056\014\027\015\013\021\011"
                + "\024\034\025\050\026\016\031\042\032\041\033\054\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\046"
                + "\003\020\004\040\005\u01a6\006\017\007\022\010\033\011"
                + "\043\012\036\013\056\014\027\015\013\021\011\024\034"
                + "\025\050\026\016\031\042\032\041\033\054\001\001\000"
                + "\046\003\020\004\040\005\u01a2\006\017\007\022\010\033"
                + "\011\043\012\036\013\056\014\027\015\013\021\011\024"
                + "\034\025\050\026\016\031\042\032\041\033\054\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\046\003\020\004\040\005\u01a9\006\017\007\022\010\033"
                + "\011\043\012\036\013\056\014\027\015\013\021\011\024"
                + "\034\025\050\026\016\031\042\032\041\033\054\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\046\003"
                + "\020\004\040\005\u01b0\006\017\007\022\010\033\011\043"
                + "\012\036\013\056\014\027\015\013\021\011\024\034\025"
                + "\050\026\016\031\042\032\041\033\054\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001"
    } );

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table()
    {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Sintax$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions()
    {
        action_obj = new CUP$Sintax$actions( this );
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num ,
            java_cup.runtime.lr_parser parser ,
            java.util.Stack stack ,
            int top )
            throws java.lang.Exception
    {
        /* call code in generated class */
        return action_obj.CUP$Sintax$do_action( act_num , parser , stack , top );
    }

    /**
     * Indicates start state.
     */
    public int start_state()
    {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production()
    {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym()
    {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym()
    {
        return 1;
    }

    private Symbol s;

    public void syntax_error( Symbol s )
    {
        this.s = s;

    }

    public Symbol getS()
    {
        return this.s;
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$Sintax$actions
{

    private final Sintax parser;

    /**
     * Constructor
     */
    CUP$Sintax$actions( Sintax parser )
    {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$Sintax$do_action(
            int CUP$Sintax$act_num ,
            java_cup.runtime.lr_parser CUP$Sintax$parser ,
            java.util.Stack CUP$Sintax$stack ,
            int CUP$Sintax$top )
            throws java.lang.Exception
    {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$Sintax$result;

        /* select the action based on the action number */
        switch ( CUP$Sintax$act_num )
        {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 140: // CICLO_MIENTRAS ::= Mientras agrupacionIzquierda CONDICION agrupacionDerecha CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(140). Línea: " + ( sright + 1 ) + ". Falta \"{\" para iniciar el ciclo." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_MIENTRAS" , 8 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 139: // CICLO_MIENTRAS ::= Mientras agrupacionIzquierda CONDICION abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(139). Línea: " + ( sright + 1 ) + ". Falta \")\" después de la condición." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_MIENTRAS" , 8 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 138: // CICLO_MIENTRAS ::= Mientras agrupacionIzquierda agrupacionDerecha abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(138). Línea: " + ( sright + 1 ) + ". Falta una condición para el ciclo." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_MIENTRAS" , 8 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 137: // CICLO_MIENTRAS ::= Mientras CONDICION agrupacionDerecha abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(137). Línea: " + ( sright + 1 ) + ". Falta \"(\" después de \"Mientras\"." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_MIENTRAS" , 8 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 136: // CICLO_MIENTRAS ::= Mientras agrupacionIzquierda CONDICION agrupacionDerecha abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_MIENTRAS" , 8 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 6 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 135: // OPREL ::= Diferente
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "OPREL" , 14 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 134: // OPREL ::= Igual
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "OPREL" , 14 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 133: // OPREL ::= MenorIgual
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "OPREL" , 14 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 132: // OPREL ::= MayorIgual
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "OPREL" , 14 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 131: // OPREL ::= Menor
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "OPREL" , 14 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 130: // OPREL ::= Mayor
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "OPREL" , 14 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 129: // OPLOG ::= O
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "OPLOG" , 13 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 128: // OPLOG ::= Y
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "OPLOG" , 13 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 127: // CONDICION1 ::= OPLOG CONDICION
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CONDICION1" , 17 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 126: // CONDICION ::= agrupacionIzquierda CONDICION agrupacionDerecha
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CONDICION" , 12 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 125: // CONDICION ::= EXPRESION OPREL EXPRESION
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CONDICION" , 12 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 124: // CONDICION ::= agrupacionIzquierda CONDICION agrupacionDerecha CONDICION1
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CONDICION" , 12 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 3 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 123: // CONDICION ::= No CONDICION
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CONDICION" , 12 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 122: // CONDICION ::= EXPRESION OPREL EXPRESION CONDICION1
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CONDICION" , 12 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 3 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 121: // CICLO_SI ::= Si agrupacionIzquierda CONDICION abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(112). Línea: " + ( sright + 1 ) + ". Falta \")\" después de la condición." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 120: // CICLO_SI ::= Si agrupacionIzquierda agrupacionDerecha abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(120). Línea: " + ( sright + 1 ) + ". Falta una condición para el ciclo." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 119: // CICLO_SI ::= Si CONDICION agrupacionDerecha abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(119). Línea: " + ( sright + 1 ) + ". Falta \"(\" después de \"Si\"." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 118: // CICLO_SI ::= agrupacionIzquierda CONDICION agrupacionDerecha abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(118). Línea: " + ( sright + 1 ) + ". Falta \"Si\" para inciar el ciclo." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 117: // CICLO_SI ::= Si agrupacionIzquierda CONDICION agrupacionDerecha abreLlave CUERPO cierraLlave Sino CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(117). Línea: " + ( sright + 1 ) + ". Falta \"{\" después de \"Sino\"." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 9 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 116: // CICLO_SI ::= Si agrupacionIzquierda CONDICION agrupacionDerecha abreLlave CUERPO cierraLlave abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(116). Línea: " + ( sright + 1 ) + ". Falta \"Sino\" después de \"}\"." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 9 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 115: // CICLO_SI ::= Si agrupacionIzquierda CONDICION agrupacionDerecha CUERPO cierraLlave Sino abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(115). Línea: " + ( sright + 1 ) + ". Falta \"{\" para iniciar el ciclo." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 9 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 114: // CICLO_SI ::= Si agrupacionIzquierda CONDICION abreLlave CUERPO cierraLlave Sino abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(114). Línea: " + ( sright + 1 ) + ". Falta \")\" después de la condición." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 9 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // CICLO_SI ::= Si agrupacionIzquierda agrupacionDerecha abreLlave CUERPO cierraLlave Sino abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(113). Línea: " + ( sright + 1 ) + ". Falta una condición para el ciclo." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 9 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // CICLO_SI ::= Si CONDICION agrupacionDerecha abreLlave CUERPO cierraLlave Sino abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(112). Línea: " + ( sright + 1 ) + ". Falta \"(\" después de \"Si\"." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 9 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // CICLO_SI ::= agrupacionIzquierda CONDICION agrupacionDerecha abreLlave CUERPO cierraLlave Sino abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(111). Línea: " + ( sright + 1 ) + ". Falta \"Si\" para iniciar el ciclo." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 9 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // CICLO_SI ::= Si agrupacionIzquierda CONDICION agrupacionDerecha abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 6 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // CICLO_SI ::= Si agrupacionIzquierda CONDICION agrupacionDerecha abreLlave CUERPO cierraLlave Sino abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO_SI" , 7 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 10 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // CICLO ::= CICLO_MIENTRAS
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO" , 5 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // CICLO ::= CICLO_SI
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CICLO" , 5 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // OPARIT ::= Division
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "OPARIT" , 10 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // OPARIT ::= Multiplicacion
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "OPARIT" , 10 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // OPARIT ::= Resta
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "OPARIT" , 10 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // OPARIT ::= Suma
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "OPARIT" , 10 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // TIPO ::= Doble
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "TIPO" , 11 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // TIPO ::= Flotante
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "TIPO" , 11 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // TIPO ::= Entero
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "TIPO" , 11 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // DECLARAR_BOOL ::= Declarar Booleano Identificador
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(99). Línea: " + ( sright + 1 ) + ". Falta \";\" para finalizar la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARAR_BOOL" , 19 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // DECLARAR_BOOL ::= Declarar Booleano finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(98). Línea: " + ( sright + 1 ) + ". Falta un identificador para la declaración." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARAR_BOOL" , 19 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // DECLARAR_BOOL ::= Booleano Identificador finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(97). Línea: " + ( sright + 1 ) + ". Falta \"Declarar\" para iniciar la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARAR_BOOL" , 19 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // DECLARAR_BOOL ::= Declarar Booleano Identificador Igual Falso finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARAR_BOOL" , 19 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // DECLARAR_BOOL ::= Declarar Booleano Identificador Igual Verdadero finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARAR_BOOL" , 19 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // DECLARAR_BOOL ::= Declarar Booleano Identificador finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARAR_BOOL" , 19 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 3 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // DECLARA_CAD ::= Declarar Cadena Identificador Igual C_Cadena
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(93). Línea: " + ( sright + 1 ) + ". Falta \";\" para finalizar la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARA_CAD" , 18 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // DECLARA_CAD ::= Declarar Cadena Identificador C_Cadena finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(92). Línea: " + ( sright + 1 ) + ". Falta \"=\" después del identificador." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARA_CAD" , 18 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // DECLARA_CAD ::= Declarar Cadena Igual C_Cadena finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(91). Línea: " + ( sright + 1 ) + ". Falta identificador para declarar." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARA_CAD" , 18 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // DECLARA_CAD ::= Declarar Identificador Igual C_Cadena finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(90). Línea: " + ( sright + 1 ) + ". Falta \"Cadena\" después de \"Declarar\"." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARA_CAD" , 18 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // DECLARA_CAD ::= Cadena Identificador Igual C_Cadena finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(89). Línea: " + ( sright + 1 ) + ". Falta \"Declarar\" para iniciar la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARA_CAD" , 18 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // DECLARA_CAD ::= Declarar Cadena finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(88). Línea: " + ( sright + 1 ) + ". Falta un identificador para la declaración." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARA_CAD" , 18 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // DECLARA_CAD ::= Declarar Cadena Identificador
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(87). Línea: " + ( sright + 1 ) + ". Falta \";\" para finalizar la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARA_CAD" , 18 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // DECLARA_CAD ::= Cadena Identificador finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(86). Línea: " + ( sright + 1 ) + ". Falta \"Declarar\" para iniciar la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARA_CAD" , 18 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // DECLARA_CAD ::= Declarar Cadena Identificador Igual C_Cadena finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARA_CAD" , 18 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // DECLARA_CAD ::= Declarar Cadena Identificador finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARA_CAD" , 18 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 3 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // DECLARACION ::= Declarar TIPO Identificador
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(83). Línea: " + ( sright + 1 ) + ". Falta \";\" para finalizar la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARACION" , 2 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // DECLARACION ::= Declarar TIPO finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(82). Línea: " + ( sright + 1 ) + ". Falta un identificador para la declaración." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARACION" , 2 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // DECLARACION ::= Declarar Identificador finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(81). Línea: " + ( sright + 1 ) + ". Es necesario definir un tipo de dato." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARACION" , 2 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // DECLARACION ::= TIPO Identificador finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(80). Línea: " + ( sright + 1 ) + ". Falta \"Declarar\" para iniciar la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARACION" , 2 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // DECLARACION ::= TIPO ASIG
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(79). Línea: " + ( sright + 1 ) + ". Falta \"Declarar\" para iniciar la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARACION" , 2 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // DECLARACION ::= Declarar TIPO Identificador finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARACION" , 2 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 3 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // DECLARACION ::= Declarar TIPO ASIG
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "DECLARACION" , 2 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // EXPRESION1 ::= agrupacionIzquierda EXPRESION agrupacionDerecha OPARIT EXPRESION
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "EXPRESION1" , 15 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // EXPRESION1 ::= OPARIT EXPRESION
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "EXPRESION1" , 15 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // EXPRESION1 ::= agrupacionIzquierda EXPRESION agrupacionDerecha
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "EXPRESION1" , 15 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // EXPRESION ::= NumeroFlotante EXPRESION1
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "EXPRESION" , 9 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // EXPRESION ::= NumeroFlotante
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "EXPRESION" , 9 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // EXPRESION ::= Numero
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "EXPRESION" , 9 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // EXPRESION ::= Identificador
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "EXPRESION" , 9 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // EXPRESION ::= EXPRESION1
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "EXPRESION" , 9 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // EXPRESION ::= Numero EXPRESION1
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "EXPRESION" , 9 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // EXPRESION ::= Identificador EXPRESION1
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "EXPRESION" , 9 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // ASIG ::= Identificador Igual finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(66). Línea: " + ( sright + 1 ) + ". La asignación no contiene una expresión" );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "ASIG" , 6 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // ASIG ::= Identificador Igual EXPRESION finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "ASIG" , 6 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 3 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // IMAGEN ::= Imagen Identificador Ruta C_Cadena DosPuntos Largo Numero DosPuntos Ancho Numero DosPuntos Posicion Numero DosPuntos Numero
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(64). Línea: " + ( sright + 1 ) + ". Falta \";\" para terminar la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // IMAGEN ::= Imagen Identificador Ruta C_Cadena DosPuntos Largo Numero DosPuntos Ancho Numero DosPuntos Posicion Numero DosPuntos finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(63). Línea: " + ( sright + 1 ) + ". Posición en Y no definida." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // IMAGEN ::= Imagen Identificador Ruta C_Cadena DosPuntos Largo Numero DosPuntos Ancho Numero DosPuntos Posicion Numero Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(62). Línea: " + ( sright + 1 ) + ". No se encontró \":\" después de la posición en X." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // IMAGEN ::= Imagen Identificador Ruta C_Cadena DosPuntos Largo Numero DosPuntos Ancho Numero DosPuntos Posicion DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(61). Línea: " + ( sright + 1 ) + ". Posición en X no definida." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // IMAGEN ::= Imagen Identificador Ruta C_Cadena DosPuntos Largo Numero DosPuntos Ancho Numero DosPuntos Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(60). Línea: " + ( sright + 1 ) + ". Es necesario definir \"Posicion\" para la imagen." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // IMAGEN ::= Imagen Identificador Ruta C_Cadena DosPuntos Largo Numero DosPuntos Ancho Numero Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(59). Línea: " + ( sright + 1 ) + ". No se encontró \":\" después del ancho." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // IMAGEN ::= Imagen Identificador Ruta C_Cadena DosPuntos Largo Numero DosPuntos Ancho DosPuntos Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(58). Línea: " + ( sright + 1 ) + ". Tamaño de \"Ancho\" no definido." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // IMAGEN ::= Imagen Identificador Ruta C_Cadena DosPuntos Largo Numero DosPuntos Numero DosPuntos Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(57). Línea: " + ( sright + 1 ) + ". Es necesario definir \"Ancho\" para la imagen." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // IMAGEN ::= Imagen Identificador Ruta C_Cadena DosPuntos Largo Numero Ancho Numero DosPuntos Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(56). Línea: " + ( sright + 1 ) + ". No se encontró \":\" después del largo." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // IMAGEN ::= Imagen Identificador Ruta C_Cadena DosPuntos Largo DosPuntos Ancho Numero DosPuntos Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(55). Línea: " + ( sright + 1 ) + ". Tamaño de \"Largo\" no definido." );
                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // IMAGEN ::= Imagen Identificador Ruta C_Cadena DosPuntos Numero DosPuntos Ancho Numero DosPuntos Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(54). Línea: " + ( sright + 1 ) + ". Es necesario definir \"Largo\" para la imagen." );
                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // IMAGEN ::= Imagen Identificador Ruta C_Cadena Largo Numero DosPuntos Ancho Numero DosPuntos Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(53). Línea: " + ( sright + 1 ) + ". No se encontró \":\" después de la ruta." );
                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // IMAGEN ::= Imagen Identificador Ruta DosPuntos Largo Numero DosPuntos Ancho Numero DosPuntos Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(52). Línea: " + ( sright + 1 ) + ". Necesario definir una ruta para obtener la imagen." );
                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // IMAGEN ::= Imagen Identificador C_Cadena DosPuntos Largo Numero DosPuntos Ancho Numero DosPuntos Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(51). Línea: " + ( sright + 1 ) + ". Falta \"Ruta\" para definir imagen." );
                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // IMAGEN ::= Imagen Ruta C_Cadena DosPuntos Largo Numero DosPuntos Ancho Numero DosPuntos Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(50). Línea: " + ( sright + 1 ) + ". Falta un identificador para la imagen." );
                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // IMAGEN ::= Identificador Ruta C_Cadena DosPuntos Largo Numero DosPuntos Ancho Numero DosPuntos Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(49). Línea: " + ( sright + 1 ) + ". No se encontró \"Imagen\" al inicio de la sentencia." );
                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 14 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // IMAGEN ::= Imagen Identificador Ruta Identificador DosPuntos Largo Numero DosPuntos Ancho Numero DosPuntos Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 15 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // IMAGEN ::= Imagen Identificador Ruta C_Cadena DosPuntos Largo Numero DosPuntos Ancho Numero DosPuntos Posicion Numero DosPuntos Numero finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "IMAGEN" , 23 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 15 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // SALIDA ::= Imprime agrupacionDerecha DosPuntos Identificador finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(46). Línea: " + ( sright + 1 ) + ". No se encontró \"(\" para imprimir." );
                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SALIDA" , 25 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // SALIDA ::= Imprime agrupacionIzquierda DosPuntos Identificador finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(45). Línea: " + ( sright + 1 ) + ". No se encontró \")\" para imprimir." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SALIDA" , 25 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // SALIDA ::= Imprime agrupacionIzquierda agrupacionDerecha Identificador finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(44). Línea: " + ( sright + 1 ) + ". Falta \":\" para imprimir." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SALIDA" , 25 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // SALIDA ::= Imprime agrupacionIzquierda agrupacionDerecha DosPuntos finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(43). Línea: " + ( sright + 1 ) + ". Es necesario un identificador para imprimir." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SALIDA" , 25 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // SALIDA ::= Imprime agrupacionIzquierda agrupacionDerecha DosPuntos Identificador
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(42). Línea: " + ( sright + 1 ) + ". Falta \";\" para finalizar la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SALIDA" , 25 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // SALIDA ::= Imprime agrupacionIzquierda agrupacionDerecha DosPuntos Identificador finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SALIDA" , 25 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // ENTRADA ::= Ingresa agrupacionIzquierda agrupacionDerecha DosPuntos Identificador
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(40). Línea: " + ( sright + 1 ) + ". Falta \";\" para terminar la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "ENTRADA" , 24 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // ENTRADA ::= Ingresa agrupacionIzquierda agrupacionDerecha DosPuntos finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(39). Línea: " + ( sright + 1 ) + ". falta un identificador para guardar la entrada." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "ENTRADA" , 24 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // ENTRADA ::= Ingresa agrupacionIzquierda agrupacionDerecha Identificador finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(38). Línea: " + ( sright + 1 ) + ". Es necesario \":\" para la entrada." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "ENTRADA" , 24 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // ENTRADA ::= Ingresa agrupacionIzquierda DosPuntos Identificador finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(37). Línea: " + ( sright + 1 ) + ". No se encontró \")\" para la entrada." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "ENTRADA" , 24 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // ENTRADA ::= Ingresa agrupacionDerecha DosPuntos Identificador finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(36). Línea: " + ( sright + 1 ) + ". No se encontró \"(\" para la entrada." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "ENTRADA" , 24 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // ENTRADA ::= agrupacionIzquierda agrupacionDerecha DosPuntos Identificador finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(35). Línea: " + ( sright + 1 ) + ". Falta la palabra \"Ingresa\"." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "ENTRADA" , 24 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 4 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // ENTRADA ::= Ingresa agrupacionIzquierda agrupacionDerecha DosPuntos Identificador finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "ENTRADA" , 24 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // SENTENCIAS ::=
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIAS" , 4 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // SENTENCIAS ::= SENTENCIA SENTENCIAS
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIAS" , 4 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // SENTENCIA ::= EXPRESION finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(31). Línea: " + ( sright + 1 ) + ". Ingrese \"Retornar\" al inicio de la sentencia." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // SENTENCIA ::= Identificador agrupacionIzquierda agrupacionDerecha
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(30). Línea: " + ( sright + 1 ) + ". Falta \";\"" );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // SENTENCIA ::= Identificador agrupacionIzquierda finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(29). Línea: " + ( sright + 1 ) + " No se encontró \")\" después del identificador de la función." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // SENTENCIA ::= Identificador agrupacionDerecha finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(28). Línea: " + ( sright + 1 ) + ". No se encontró \"(\" después del identificador de la función." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // SENTENCIA ::= agrupacionIzquierda agrupacionDerecha finSentencia
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(27). Línea: " + ( sright + 1 ) + ". No se ingresó una función." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // SENTENCIA ::= SALIDA
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // SENTENCIA ::= ENTRADA
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // SENTENCIA ::= IMAGEN
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // SENTENCIA ::= Retornar finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // SENTENCIA ::= Retornar EXPRESION finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 2 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // SENTENCIA ::= FUNCION
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // SENTENCIA ::= Identificador agrupacionIzquierda agrupacionDerecha finSentencia
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 3 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // SENTENCIA ::= DECLARAR_BOOL
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // SENTENCIA ::= DECLARA_CAD
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // SENTENCIA ::= DECLARACION
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // SENTENCIA ::= CICLO
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // SENTENCIA ::= ASIG
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "SENTENCIA" , 1 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // CUERPO ::= SENTENCIAS
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "CUERPO" , 3 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // FUNCION ::= Funcion Identificador agrupacionIzquierda agrupacionDerecha CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(13). Línea: " + ( sright + 1 ) + " No se encontró \"{\" para iniciar la función." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "FUNCION" , 20 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // FUNCION ::= Funcion Identificador agrupacionIzquierda abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(12). Línea: " + ( sright + 1 ) + " No se encontró \")\" para la función." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "FUNCION" , 20 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // FUNCION ::= Funcion Identificador agrupacionDerecha abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(11). Línea: " + ( sright + 1 ) + ". No se encontró \"(\" para la función." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "FUNCION" , 20 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // FUNCION ::= Funcion agrupacionIzquierda agrupacionDerecha abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(10). Línea: " + ( sright + 1 ) + ". Falta asignar nombre a la función." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "FUNCION" , 20 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // FUNCION ::= Identificador agrupacionIzquierda agrupacionDerecha abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(9). Línea: " + ( sright + 1 ) + ". Función mal declarada. Debe contener \"Funcion\"" );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "FUNCION" , 20 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // FUNCION ::= Funcion Identificador agrupacionIzquierda agrupacionDerecha abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "FUNCION" , 20 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 6 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // INICIO ::= Inicio Clase Identificador abreLlave CUERPO Fin
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(7). Línea: " + ( sright + 1 ) + ". No se encontró \"}\" para el cierre de la clase." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "INICIO" , 0 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // INICIO ::= Inicio Clase Identificador CUERPO cierraLlave Fin
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(6). Línea: " + ( sright + 1 ) + " No se encontró \"{\" para iniciar la clase." );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "INICIO" , 0 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // INICIO ::= Inicio Clase abreLlave CUERPO cierraLlave Fin
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(5). Línea: " + ( sright + 1 ) + ". Falta asignar un nombre a la clase" );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "INICIO" , 0 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // INICIO ::= Inicio Identificador abreLlave CUERPO cierraLlave Fin
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(4). Línea: " + ( sright + 1 ) + " No se encontró \"Clase\" después de \"Inicio\"" );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "INICIO" , 0 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // INICIO ::= Clase Identificador abreLlave CUERPO cierraLlave Fin
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(3). Línea: " + ( sright + 1 ) + " No se encontró \"Inicio\" antes de \"Clase\"" );
                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "INICIO" , 0 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // INICIO ::= Inicio Clase Identificador abreLlave CUERPO cierraLlave
            {
                Object RESULT = null;
                int sright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ).right;
                AnalizadorLexico.ERRORES.add( "Error sintáctico(2). Línea: " + ( sright + 1 ) + " No se encontró \"Fin\" después de \"}\"" );

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "INICIO" , 0 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 5 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // INICIO ::= Inicio Clase Identificador abreLlave CUERPO cierraLlave Fin
            {
                Object RESULT = null;

                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "INICIO" , 0 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 6 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            return CUP$Sintax$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= INICIO EOF
            {
                Object RESULT = null;
                int start_valleft = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ).left;
                int start_valright = ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ).right;
                Object start_val = ( Object ) ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ).value;
                RESULT = start_val;
                CUP$Sintax$result = parser.getSymbolFactory().newSymbol( "$START" , 0 , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.elementAt( CUP$Sintax$top - 1 ) ) , ( ( java_cup.runtime.Symbol ) CUP$Sintax$stack.peek() ) , RESULT );
            }
            /* ACCEPT */
            CUP$Sintax$parser.done_parsing();
            return CUP$Sintax$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table" );

        }
    }
}
